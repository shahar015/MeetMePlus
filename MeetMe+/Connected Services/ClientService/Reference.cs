//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeetMe_.ClientService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="FriendsList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Friend")]
    [System.SerializableAttribute()]
    public class FriendsList : System.Collections.Generic.List<MeetMe_.ClientService.Friend> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Friend", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Friend : MeetMe_.ClientService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User User1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User User2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User User1 {
            get {
                return this.User1Field;
            }
            set {
                if ((object.ReferenceEquals(this.User1Field, value) != true)) {
                    this.User1Field = value;
                    this.RaisePropertyChanged("User1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User User2 {
            get {
                return this.User2Field;
            }
            set {
                if ((object.ReferenceEquals(this.User2Field, value) != true)) {
                    this.User2Field = value;
                    this.RaisePropertyChanged("User2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MeetMe_.ClientService.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MeetMe_.ClientService.Meeting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MeetMe_.ClientService.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MeetMe_.ClientService.Chat))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MeetMe_.ClientService.ParticipentInMeeting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MeetMe_.ClientService.Friend))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : MeetMe_.ClientService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InterestsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfPicExtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((this.GenderField.Equals(value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Interests {
            get {
                return this.InterestsField;
            }
            set {
                if ((object.ReferenceEquals(this.InterestsField, value) != true)) {
                    this.InterestsField = value;
                    this.RaisePropertyChanged("Interests");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfPicExt {
            get {
                return this.ProfPicExtField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfPicExtField, value) != true)) {
                    this.ProfPicExtField = value;
                    this.RaisePropertyChanged("ProfPicExt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Meeting", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Meeting : MeetMe_.ClientService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MeetingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MeetingTime {
            get {
                return this.MeetingTimeField;
            }
            set {
                if ((this.MeetingTimeField.Equals(value) != true)) {
                    this.MeetingTimeField = value;
                    this.RaisePropertyChanged("MeetingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Message : MeetMe_.ClientService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.Chat ChatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendingTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.Chat Chat {
            get {
                return this.ChatField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatField, value) != true)) {
                    this.ChatField = value;
                    this.RaisePropertyChanged("Chat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendingTime {
            get {
                return this.SendingTimeField;
            }
            set {
                if ((this.SendingTimeField.Equals(value) != true)) {
                    this.SendingTimeField = value;
                    this.RaisePropertyChanged("SendingTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chat", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Chat : MeetMe_.ClientService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User User1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User User2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User User1 {
            get {
                return this.User1Field;
            }
            set {
                if ((object.ReferenceEquals(this.User1Field, value) != true)) {
                    this.User1Field = value;
                    this.RaisePropertyChanged("User1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User User2 {
            get {
                return this.User2Field;
            }
            set {
                if ((object.ReferenceEquals(this.User2Field, value) != true)) {
                    this.User2Field = value;
                    this.RaisePropertyChanged("User2");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParticipentInMeeting", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class ParticipentInMeeting : MeetMe_.ClientService.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.Meeting MeetingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MeetMe_.ClientService.User ParticipentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.Meeting Meeting {
            get {
                return this.MeetingField;
            }
            set {
                if ((object.ReferenceEquals(this.MeetingField, value) != true)) {
                    this.MeetingField = value;
                    this.RaisePropertyChanged("Meeting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MeetMe_.ClientService.User Participent {
            get {
                return this.ParticipentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipentField, value) != true)) {
                    this.ParticipentField = value;
                    this.RaisePropertyChanged("Participent");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UsersList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="User")]
    [System.SerializableAttribute()]
    public class UsersList : System.Collections.Generic.List<MeetMe_.ClientService.User> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="MeetingsList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Meeting")]
    [System.SerializableAttribute()]
    public class MeetingsList : System.Collections.Generic.List<MeetMe_.ClientService.Meeting> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="MessagesList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Message")]
    [System.SerializableAttribute()]
    public class MessagesList : System.Collections.Generic.List<MeetMe_.ClientService.Message> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ParticipentsInMeetingList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="ParticipentInMeeting")]
    [System.SerializableAttribute()]
    public class ParticipentsInMeetingList : System.Collections.Generic.List<MeetMe_.ClientService.ParticipentInMeeting> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ChatsList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Chat")]
    [System.SerializableAttribute()]
    public class ChatsList : System.Collections.Generic.List<MeetMe_.ClientService.Chat> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_SelectAll", ReplyAction="http://tempuri.org/IService/Friends_SelectAllResponse")]
        MeetMe_.ClientService.FriendsList Friends_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_SelectAll", ReplyAction="http://tempuri.org/IService/Friends_SelectAllResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.FriendsList> Friends_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friend_SelectById", ReplyAction="http://tempuri.org/IService/Friend_SelectByIdResponse")]
        MeetMe_.ClientService.Friend Friend_SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friend_SelectById", ReplyAction="http://tempuri.org/IService/Friend_SelectByIdResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.Friend> Friend_SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_Insert", ReplyAction="http://tempuri.org/IService/Friends_InsertResponse")]
        int Friends_Insert(MeetMe_.ClientService.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_Insert", ReplyAction="http://tempuri.org/IService/Friends_InsertResponse")]
        System.Threading.Tasks.Task<int> Friends_InsertAsync(MeetMe_.ClientService.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_Update", ReplyAction="http://tempuri.org/IService/Friends_UpdateResponse")]
        int Friends_Update(MeetMe_.ClientService.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_Update", ReplyAction="http://tempuri.org/IService/Friends_UpdateResponse")]
        System.Threading.Tasks.Task<int> Friends_UpdateAsync(MeetMe_.ClientService.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_Delete", ReplyAction="http://tempuri.org/IService/Friends_DeleteResponse")]
        int Friends_Delete(MeetMe_.ClientService.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friends_Delete", ReplyAction="http://tempuri.org/IService/Friends_DeleteResponse")]
        System.Threading.Tasks.Task<int> Friends_DeleteAsync(MeetMe_.ClientService.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friend_SelectByUser", ReplyAction="http://tempuri.org/IService/Friend_SelectByUserResponse")]
        MeetMe_.ClientService.FriendsList Friend_SelectByUser(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Friend_SelectByUser", ReplyAction="http://tempuri.org/IService/Friend_SelectByUserResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.FriendsList> Friend_SelectByUserAsync(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_SelectAll", ReplyAction="http://tempuri.org/IService/Users_SelectAllResponse")]
        MeetMe_.ClientService.UsersList Users_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_SelectAll", ReplyAction="http://tempuri.org/IService/Users_SelectAllResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.UsersList> Users_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/User_SelectById", ReplyAction="http://tempuri.org/IService/User_SelectByIdResponse")]
        MeetMe_.ClientService.User User_SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/User_SelectById", ReplyAction="http://tempuri.org/IService/User_SelectByIdResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.User> User_SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/User_Search", ReplyAction="http://tempuri.org/IService/User_SearchResponse")]
        MeetMe_.ClientService.UsersList User_Search(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/User_Search", ReplyAction="http://tempuri.org/IService/User_SearchResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.UsersList> User_SearchAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_Insert", ReplyAction="http://tempuri.org/IService/Users_InsertResponse")]
        int Users_Insert(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_Insert", ReplyAction="http://tempuri.org/IService/Users_InsertResponse")]
        System.Threading.Tasks.Task<int> Users_InsertAsync(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_Update", ReplyAction="http://tempuri.org/IService/Users_UpdateResponse")]
        int Users_Update(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_Update", ReplyAction="http://tempuri.org/IService/Users_UpdateResponse")]
        System.Threading.Tasks.Task<int> Users_UpdateAsync(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_Delete", ReplyAction="http://tempuri.org/IService/Users_DeleteResponse")]
        int Users_Delete(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Users_Delete", ReplyAction="http://tempuri.org/IService/Users_DeleteResponse")]
        System.Threading.Tasks.Task<int> Users_DeleteAsync(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/User_SelectLogin", ReplyAction="http://tempuri.org/IService/User_SelectLoginResponse")]
        MeetMe_.ClientService.User User_SelectLogin(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/User_SelectLogin", ReplyAction="http://tempuri.org/IService/User_SelectLoginResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.User> User_SelectLoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindUsername", ReplyAction="http://tempuri.org/IService/FindUsernameResponse")]
        MeetMe_.ClientService.User FindUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/FindUsername", ReplyAction="http://tempuri.org/IService/FindUsernameResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.User> FindUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_SelectAll", ReplyAction="http://tempuri.org/IService/Meetings_SelectAllResponse")]
        MeetMe_.ClientService.MeetingsList Meetings_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_SelectAll", ReplyAction="http://tempuri.org/IService/Meetings_SelectAllResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.MeetingsList> Meetings_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meeting_SelectById", ReplyAction="http://tempuri.org/IService/Meeting_SelectByIdResponse")]
        MeetMe_.ClientService.Meeting Meeting_SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meeting_SelectById", ReplyAction="http://tempuri.org/IService/Meeting_SelectByIdResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.Meeting> Meeting_SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_Insert", ReplyAction="http://tempuri.org/IService/Meetings_InsertResponse")]
        int Meetings_Insert(MeetMe_.ClientService.Meeting meeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_Insert", ReplyAction="http://tempuri.org/IService/Meetings_InsertResponse")]
        System.Threading.Tasks.Task<int> Meetings_InsertAsync(MeetMe_.ClientService.Meeting meeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_Update", ReplyAction="http://tempuri.org/IService/Meetings_UpdateResponse")]
        int Meetings_Update(MeetMe_.ClientService.Meeting meeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_Update", ReplyAction="http://tempuri.org/IService/Meetings_UpdateResponse")]
        System.Threading.Tasks.Task<int> Meetings_UpdateAsync(MeetMe_.ClientService.Meeting meeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_Delete", ReplyAction="http://tempuri.org/IService/Meetings_DeleteResponse")]
        int Meetings_Delete(MeetMe_.ClientService.Meeting meeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_Delete", ReplyAction="http://tempuri.org/IService/Meetings_DeleteResponse")]
        System.Threading.Tasks.Task<int> Meetings_DeleteAsync(MeetMe_.ClientService.Meeting meeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_SelectAllBesidesUser", ReplyAction="http://tempuri.org/IService/Meetings_SelectAllBesidesUserResponse")]
        MeetMe_.ClientService.MeetingsList Meetings_SelectAllBesidesUser(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Meetings_SelectAllBesidesUser", ReplyAction="http://tempuri.org/IService/Meetings_SelectAllBesidesUserResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.MeetingsList> Meetings_SelectAllBesidesUserAsync(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Messages_SelectAll", ReplyAction="http://tempuri.org/IService/Messages_SelectAllResponse")]
        MeetMe_.ClientService.MessagesList Messages_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Messages_SelectAll", ReplyAction="http://tempuri.org/IService/Messages_SelectAllResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.MessagesList> Messages_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_SelectById", ReplyAction="http://tempuri.org/IService/Message_SelectByIdResponse")]
        MeetMe_.ClientService.Message Message_SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_SelectById", ReplyAction="http://tempuri.org/IService/Message_SelectByIdResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.Message> Message_SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_SelectByChat", ReplyAction="http://tempuri.org/IService/Message_SelectByChatResponse")]
        MeetMe_.ClientService.MessagesList Message_SelectByChat(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_SelectByChat", ReplyAction="http://tempuri.org/IService/Message_SelectByChatResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.MessagesList> Message_SelectByChatAsync(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_SearchTextInChat", ReplyAction="http://tempuri.org/IService/Message_SearchTextInChatResponse")]
        MeetMe_.ClientService.MessagesList Message_SearchTextInChat(MeetMe_.ClientService.Chat chat, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_SearchTextInChat", ReplyAction="http://tempuri.org/IService/Message_SearchTextInChatResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.MessagesList> Message_SearchTextInChatAsync(MeetMe_.ClientService.Chat chat, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_Insert", ReplyAction="http://tempuri.org/IService/Message_InsertResponse")]
        int Message_Insert(MeetMe_.ClientService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_Insert", ReplyAction="http://tempuri.org/IService/Message_InsertResponse")]
        System.Threading.Tasks.Task<int> Message_InsertAsync(MeetMe_.ClientService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_Update", ReplyAction="http://tempuri.org/IService/Message_UpdateResponse")]
        int Message_Update(MeetMe_.ClientService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_Update", ReplyAction="http://tempuri.org/IService/Message_UpdateResponse")]
        System.Threading.Tasks.Task<int> Message_UpdateAsync(MeetMe_.ClientService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_Delete", ReplyAction="http://tempuri.org/IService/Message_DeleteResponse")]
        int Message_Delete(MeetMe_.ClientService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Message_Delete", ReplyAction="http://tempuri.org/IService/Message_DeleteResponse")]
        System.Threading.Tasks.Task<int> Message_DeleteAsync(MeetMe_.ClientService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentsInMeeting_SelectAll", ReplyAction="http://tempuri.org/IService/ParticipentsInMeeting_SelectAllResponse")]
        MeetMe_.ClientService.ParticipentsInMeetingList ParticipentsInMeeting_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentsInMeeting_SelectAll", ReplyAction="http://tempuri.org/IService/ParticipentsInMeeting_SelectAllResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.ParticipentsInMeetingList> ParticipentsInMeeting_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_SelectById", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_SelectByIdResponse")]
        MeetMe_.ClientService.ParticipentInMeeting ParticipentInMeeting_SelectById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_SelectById", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_SelectByIdResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.ParticipentInMeeting> ParticipentInMeeting_SelectByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_Insert", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_InsertResponse")]
        int ParticipentInMeeting_Insert(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_Insert", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_InsertResponse")]
        System.Threading.Tasks.Task<int> ParticipentInMeeting_InsertAsync(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_Update", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_UpdateResponse")]
        int ParticipentInMeeting_Update(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_Update", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_UpdateResponse")]
        System.Threading.Tasks.Task<int> ParticipentInMeeting_UpdateAsync(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_Delete", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_DeleteResponse")]
        int ParticipentInMeeting_Delete(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ParticipentInMeeting_Delete", ReplyAction="http://tempuri.org/IService/ParticipentInMeeting_DeleteResponse")]
        System.Threading.Tasks.Task<int> ParticipentInMeeting_DeleteAsync(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectAll", ReplyAction="http://tempuri.org/IService/Chat_SelectAllResponse")]
        MeetMe_.ClientService.ChatsList Chat_SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectAll", ReplyAction="http://tempuri.org/IService/Chat_SelectAllResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.ChatsList> Chat_SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectId", ReplyAction="http://tempuri.org/IService/Chat_SelectIdResponse")]
        MeetMe_.ClientService.Chat Chat_SelectId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectId", ReplyAction="http://tempuri.org/IService/Chat_SelectIdResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.Chat> Chat_SelectIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectByUser", ReplyAction="http://tempuri.org/IService/Chat_SelectByUserResponse")]
        MeetMe_.ClientService.ChatsList Chat_SelectByUser(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectByUser", ReplyAction="http://tempuri.org/IService/Chat_SelectByUserResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.ChatsList> Chat_SelectByUserAsync(MeetMe_.ClientService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectByUsers", ReplyAction="http://tempuri.org/IService/Chat_SelectByUsersResponse")]
        MeetMe_.ClientService.Chat Chat_SelectByUsers(MeetMe_.ClientService.User user1, MeetMe_.ClientService.User user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SelectByUsers", ReplyAction="http://tempuri.org/IService/Chat_SelectByUsersResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.Chat> Chat_SelectByUsersAsync(MeetMe_.ClientService.User user1, MeetMe_.ClientService.User user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SearchText", ReplyAction="http://tempuri.org/IService/Chat_SearchTextResponse")]
        MeetMe_.ClientService.ChatsList Chat_SearchText(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_SearchText", ReplyAction="http://tempuri.org/IService/Chat_SearchTextResponse")]
        System.Threading.Tasks.Task<MeetMe_.ClientService.ChatsList> Chat_SearchTextAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_Insert", ReplyAction="http://tempuri.org/IService/Chat_InsertResponse")]
        int Chat_Insert(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_Insert", ReplyAction="http://tempuri.org/IService/Chat_InsertResponse")]
        System.Threading.Tasks.Task<int> Chat_InsertAsync(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_Update", ReplyAction="http://tempuri.org/IService/Chat_UpdateResponse")]
        int Chat_Update(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_Update", ReplyAction="http://tempuri.org/IService/Chat_UpdateResponse")]
        System.Threading.Tasks.Task<int> Chat_UpdateAsync(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_Delete", ReplyAction="http://tempuri.org/IService/Chat_DeleteResponse")]
        int Chat_Delete(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Chat_Delete", ReplyAction="http://tempuri.org/IService/Chat_DeleteResponse")]
        System.Threading.Tasks.Task<int> Chat_DeleteAsync(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFromChat", ReplyAction="http://tempuri.org/IService/DeleteFromChatResponse")]
        int DeleteFromChat(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteFromChat", ReplyAction="http://tempuri.org/IService/DeleteFromChatResponse")]
        System.Threading.Tasks.Task<int> DeleteFromChatAsync(MeetMe_.ClientService.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIamge", ReplyAction="http://tempuri.org/IService/GetIamgeResponse")]
        byte[] GetIamge(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetIamge", ReplyAction="http://tempuri.org/IService/GetIamgeResponse")]
        System.Threading.Tasks.Task<byte[]> GetIamgeAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveImage", ReplyAction="http://tempuri.org/IService/SaveImageResponse")]
        void SaveImage(byte[] imageArray, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveImage", ReplyAction="http://tempuri.org/IService/SaveImageResponse")]
        System.Threading.Tasks.Task SaveImageAsync(byte[] imageArray, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteImage", ReplyAction="http://tempuri.org/IService/DeleteImageResponse")]
        void DeleteImage(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteImage", ReplyAction="http://tempuri.org/IService/DeleteImageResponse")]
        System.Threading.Tasks.Task DeleteImageAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : MeetMe_.ClientService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<MeetMe_.ClientService.IService>, MeetMe_.ClientService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MeetMe_.ClientService.FriendsList Friends_SelectAll() {
            return base.Channel.Friends_SelectAll();
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.FriendsList> Friends_SelectAllAsync() {
            return base.Channel.Friends_SelectAllAsync();
        }
        
        public MeetMe_.ClientService.Friend Friend_SelectById(int id) {
            return base.Channel.Friend_SelectById(id);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.Friend> Friend_SelectByIdAsync(int id) {
            return base.Channel.Friend_SelectByIdAsync(id);
        }
        
        public int Friends_Insert(MeetMe_.ClientService.Friend friend) {
            return base.Channel.Friends_Insert(friend);
        }
        
        public System.Threading.Tasks.Task<int> Friends_InsertAsync(MeetMe_.ClientService.Friend friend) {
            return base.Channel.Friends_InsertAsync(friend);
        }
        
        public int Friends_Update(MeetMe_.ClientService.Friend friend) {
            return base.Channel.Friends_Update(friend);
        }
        
        public System.Threading.Tasks.Task<int> Friends_UpdateAsync(MeetMe_.ClientService.Friend friend) {
            return base.Channel.Friends_UpdateAsync(friend);
        }
        
        public int Friends_Delete(MeetMe_.ClientService.Friend friend) {
            return base.Channel.Friends_Delete(friend);
        }
        
        public System.Threading.Tasks.Task<int> Friends_DeleteAsync(MeetMe_.ClientService.Friend friend) {
            return base.Channel.Friends_DeleteAsync(friend);
        }
        
        public MeetMe_.ClientService.FriendsList Friend_SelectByUser(MeetMe_.ClientService.User user) {
            return base.Channel.Friend_SelectByUser(user);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.FriendsList> Friend_SelectByUserAsync(MeetMe_.ClientService.User user) {
            return base.Channel.Friend_SelectByUserAsync(user);
        }
        
        public MeetMe_.ClientService.UsersList Users_SelectAll() {
            return base.Channel.Users_SelectAll();
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.UsersList> Users_SelectAllAsync() {
            return base.Channel.Users_SelectAllAsync();
        }
        
        public MeetMe_.ClientService.User User_SelectById(int id) {
            return base.Channel.User_SelectById(id);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.User> User_SelectByIdAsync(int id) {
            return base.Channel.User_SelectByIdAsync(id);
        }
        
        public MeetMe_.ClientService.UsersList User_Search(string text) {
            return base.Channel.User_Search(text);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.UsersList> User_SearchAsync(string text) {
            return base.Channel.User_SearchAsync(text);
        }
        
        public int Users_Insert(MeetMe_.ClientService.User user) {
            return base.Channel.Users_Insert(user);
        }
        
        public System.Threading.Tasks.Task<int> Users_InsertAsync(MeetMe_.ClientService.User user) {
            return base.Channel.Users_InsertAsync(user);
        }
        
        public int Users_Update(MeetMe_.ClientService.User user) {
            return base.Channel.Users_Update(user);
        }
        
        public System.Threading.Tasks.Task<int> Users_UpdateAsync(MeetMe_.ClientService.User user) {
            return base.Channel.Users_UpdateAsync(user);
        }
        
        public int Users_Delete(MeetMe_.ClientService.User user) {
            return base.Channel.Users_Delete(user);
        }
        
        public System.Threading.Tasks.Task<int> Users_DeleteAsync(MeetMe_.ClientService.User user) {
            return base.Channel.Users_DeleteAsync(user);
        }
        
        public MeetMe_.ClientService.User User_SelectLogin(string username, string password) {
            return base.Channel.User_SelectLogin(username, password);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.User> User_SelectLoginAsync(string username, string password) {
            return base.Channel.User_SelectLoginAsync(username, password);
        }
        
        public MeetMe_.ClientService.User FindUsername(string username) {
            return base.Channel.FindUsername(username);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.User> FindUsernameAsync(string username) {
            return base.Channel.FindUsernameAsync(username);
        }
        
        public MeetMe_.ClientService.MeetingsList Meetings_SelectAll() {
            return base.Channel.Meetings_SelectAll();
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.MeetingsList> Meetings_SelectAllAsync() {
            return base.Channel.Meetings_SelectAllAsync();
        }
        
        public MeetMe_.ClientService.Meeting Meeting_SelectById(int id) {
            return base.Channel.Meeting_SelectById(id);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.Meeting> Meeting_SelectByIdAsync(int id) {
            return base.Channel.Meeting_SelectByIdAsync(id);
        }
        
        public int Meetings_Insert(MeetMe_.ClientService.Meeting meeting) {
            return base.Channel.Meetings_Insert(meeting);
        }
        
        public System.Threading.Tasks.Task<int> Meetings_InsertAsync(MeetMe_.ClientService.Meeting meeting) {
            return base.Channel.Meetings_InsertAsync(meeting);
        }
        
        public int Meetings_Update(MeetMe_.ClientService.Meeting meeting) {
            return base.Channel.Meetings_Update(meeting);
        }
        
        public System.Threading.Tasks.Task<int> Meetings_UpdateAsync(MeetMe_.ClientService.Meeting meeting) {
            return base.Channel.Meetings_UpdateAsync(meeting);
        }
        
        public int Meetings_Delete(MeetMe_.ClientService.Meeting meeting) {
            return base.Channel.Meetings_Delete(meeting);
        }
        
        public System.Threading.Tasks.Task<int> Meetings_DeleteAsync(MeetMe_.ClientService.Meeting meeting) {
            return base.Channel.Meetings_DeleteAsync(meeting);
        }
        
        public MeetMe_.ClientService.MeetingsList Meetings_SelectAllBesidesUser(MeetMe_.ClientService.User user) {
            return base.Channel.Meetings_SelectAllBesidesUser(user);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.MeetingsList> Meetings_SelectAllBesidesUserAsync(MeetMe_.ClientService.User user) {
            return base.Channel.Meetings_SelectAllBesidesUserAsync(user);
        }
        
        public MeetMe_.ClientService.MessagesList Messages_SelectAll() {
            return base.Channel.Messages_SelectAll();
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.MessagesList> Messages_SelectAllAsync() {
            return base.Channel.Messages_SelectAllAsync();
        }
        
        public MeetMe_.ClientService.Message Message_SelectById(int id) {
            return base.Channel.Message_SelectById(id);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.Message> Message_SelectByIdAsync(int id) {
            return base.Channel.Message_SelectByIdAsync(id);
        }
        
        public MeetMe_.ClientService.MessagesList Message_SelectByChat(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Message_SelectByChat(chat);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.MessagesList> Message_SelectByChatAsync(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Message_SelectByChatAsync(chat);
        }
        
        public MeetMe_.ClientService.MessagesList Message_SearchTextInChat(MeetMe_.ClientService.Chat chat, string text) {
            return base.Channel.Message_SearchTextInChat(chat, text);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.MessagesList> Message_SearchTextInChatAsync(MeetMe_.ClientService.Chat chat, string text) {
            return base.Channel.Message_SearchTextInChatAsync(chat, text);
        }
        
        public int Message_Insert(MeetMe_.ClientService.Message message) {
            return base.Channel.Message_Insert(message);
        }
        
        public System.Threading.Tasks.Task<int> Message_InsertAsync(MeetMe_.ClientService.Message message) {
            return base.Channel.Message_InsertAsync(message);
        }
        
        public int Message_Update(MeetMe_.ClientService.Message message) {
            return base.Channel.Message_Update(message);
        }
        
        public System.Threading.Tasks.Task<int> Message_UpdateAsync(MeetMe_.ClientService.Message message) {
            return base.Channel.Message_UpdateAsync(message);
        }
        
        public int Message_Delete(MeetMe_.ClientService.Message message) {
            return base.Channel.Message_Delete(message);
        }
        
        public System.Threading.Tasks.Task<int> Message_DeleteAsync(MeetMe_.ClientService.Message message) {
            return base.Channel.Message_DeleteAsync(message);
        }
        
        public MeetMe_.ClientService.ParticipentsInMeetingList ParticipentsInMeeting_SelectAll() {
            return base.Channel.ParticipentsInMeeting_SelectAll();
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.ParticipentsInMeetingList> ParticipentsInMeeting_SelectAllAsync() {
            return base.Channel.ParticipentsInMeeting_SelectAllAsync();
        }
        
        public MeetMe_.ClientService.ParticipentInMeeting ParticipentInMeeting_SelectById(int id) {
            return base.Channel.ParticipentInMeeting_SelectById(id);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.ParticipentInMeeting> ParticipentInMeeting_SelectByIdAsync(int id) {
            return base.Channel.ParticipentInMeeting_SelectByIdAsync(id);
        }
        
        public int ParticipentInMeeting_Insert(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting) {
            return base.Channel.ParticipentInMeeting_Insert(participentInMeeting);
        }
        
        public System.Threading.Tasks.Task<int> ParticipentInMeeting_InsertAsync(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting) {
            return base.Channel.ParticipentInMeeting_InsertAsync(participentInMeeting);
        }
        
        public int ParticipentInMeeting_Update(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting) {
            return base.Channel.ParticipentInMeeting_Update(participentInMeeting);
        }
        
        public System.Threading.Tasks.Task<int> ParticipentInMeeting_UpdateAsync(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting) {
            return base.Channel.ParticipentInMeeting_UpdateAsync(participentInMeeting);
        }
        
        public int ParticipentInMeeting_Delete(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting) {
            return base.Channel.ParticipentInMeeting_Delete(participentInMeeting);
        }
        
        public System.Threading.Tasks.Task<int> ParticipentInMeeting_DeleteAsync(MeetMe_.ClientService.ParticipentInMeeting participentInMeeting) {
            return base.Channel.ParticipentInMeeting_DeleteAsync(participentInMeeting);
        }
        
        public MeetMe_.ClientService.ChatsList Chat_SelectAll() {
            return base.Channel.Chat_SelectAll();
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.ChatsList> Chat_SelectAllAsync() {
            return base.Channel.Chat_SelectAllAsync();
        }
        
        public MeetMe_.ClientService.Chat Chat_SelectId(int id) {
            return base.Channel.Chat_SelectId(id);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.Chat> Chat_SelectIdAsync(int id) {
            return base.Channel.Chat_SelectIdAsync(id);
        }
        
        public MeetMe_.ClientService.ChatsList Chat_SelectByUser(MeetMe_.ClientService.User user) {
            return base.Channel.Chat_SelectByUser(user);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.ChatsList> Chat_SelectByUserAsync(MeetMe_.ClientService.User user) {
            return base.Channel.Chat_SelectByUserAsync(user);
        }
        
        public MeetMe_.ClientService.Chat Chat_SelectByUsers(MeetMe_.ClientService.User user1, MeetMe_.ClientService.User user2) {
            return base.Channel.Chat_SelectByUsers(user1, user2);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.Chat> Chat_SelectByUsersAsync(MeetMe_.ClientService.User user1, MeetMe_.ClientService.User user2) {
            return base.Channel.Chat_SelectByUsersAsync(user1, user2);
        }
        
        public MeetMe_.ClientService.ChatsList Chat_SearchText(string text) {
            return base.Channel.Chat_SearchText(text);
        }
        
        public System.Threading.Tasks.Task<MeetMe_.ClientService.ChatsList> Chat_SearchTextAsync(string text) {
            return base.Channel.Chat_SearchTextAsync(text);
        }
        
        public int Chat_Insert(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Chat_Insert(chat);
        }
        
        public System.Threading.Tasks.Task<int> Chat_InsertAsync(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Chat_InsertAsync(chat);
        }
        
        public int Chat_Update(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Chat_Update(chat);
        }
        
        public System.Threading.Tasks.Task<int> Chat_UpdateAsync(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Chat_UpdateAsync(chat);
        }
        
        public int Chat_Delete(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Chat_Delete(chat);
        }
        
        public System.Threading.Tasks.Task<int> Chat_DeleteAsync(MeetMe_.ClientService.Chat chat) {
            return base.Channel.Chat_DeleteAsync(chat);
        }
        
        public int DeleteFromChat(MeetMe_.ClientService.Chat chat) {
            return base.Channel.DeleteFromChat(chat);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFromChatAsync(MeetMe_.ClientService.Chat chat) {
            return base.Channel.DeleteFromChatAsync(chat);
        }
        
        public byte[] GetIamge(string fileName) {
            return base.Channel.GetIamge(fileName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetIamgeAsync(string fileName) {
            return base.Channel.GetIamgeAsync(fileName);
        }
        
        public void SaveImage(byte[] imageArray, string fileName) {
            base.Channel.SaveImage(imageArray, fileName);
        }
        
        public System.Threading.Tasks.Task SaveImageAsync(byte[] imageArray, string fileName) {
            return base.Channel.SaveImageAsync(imageArray, fileName);
        }
        
        public void DeleteImage(string fileName) {
            base.Channel.DeleteImage(fileName);
        }
        
        public System.Threading.Tasks.Task DeleteImageAsync(string fileName) {
            return base.Channel.DeleteImageAsync(fileName);
        }
    }
}
